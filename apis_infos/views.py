# generated by appcreator
import django_tables2
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.urls import reverse, reverse_lazy
from django.views.generic.detail import DetailView
from django.views.generic.edit import DeleteView, CreateView, UpdateView
from .filters import *
from .forms import *
from .tables import *
from .models import *


# copied from browsing.browsing_utils to remove dependency
# should be cleaned up
class GenericListView(django_tables2.SingleTableView):
    filter_class = None
    formhelper_class = None
    context_filter_name = "filter"
    paginate_by = 25
    template_name = "browsing/generic_list.html"
    init_columns = []

    def get_table_class(self):
        if self.table_class:
            return self.table_class
        else:
            return get_entities_table(self.model)

        raise ImproperlyConfigured(
            "You must either specify {0}.table_class or {0}.model".format(
                type(self).__name__
            )
        )

    def get_all_cols(self):
        print("get_table")
        print(self.get_table().base_columns.keys())
        all_cols = list(self.get_table().base_columns.keys())
        return all_cols

    def get_queryset(self, **kwargs):
        qs = super(GenericListView, self).get_queryset()
        self.filter = self.filter_class(self.request.GET, queryset=qs)
        self.filter.form.helper = self.formhelper_class()
        return self.filter.qs

    def get_table(self, **kwargs):
        table = super(GenericListView, self).get_table()
        default_cols = self.init_columns
        all_cols = table.base_columns.keys()
        selected_cols = self.request.GET.getlist("columns") + default_cols
        exclude_vals = [x for x in all_cols if x not in selected_cols]
        table.exclude = exclude_vals
        return table

    def get_context_data(self, **kwargs):
        context = super(GenericListView, self).get_context_data()
        togglable_colums = [
            x for x in self.get_all_cols() if x not in self.init_columns
        ]
        context["togglable_colums"] = togglable_colums
        context[self.context_filter_name] = self.filter
        context["docstring"] = "{}".format(self.model.__doc__)
        if self.model._meta.verbose_name_plural:
            context["class_name"] = "{}".format(self.model._meta.verbose_name.title())
        else:
            if self.model.__name__.endswith("s"):
                context["class_name"] = "{}".format(self.model.__name__)
            else:
                context["class_name"] = "{}s".format(self.model.__name__)
        try:
            context["get_arche_dump"] = self.model.get_arche_dump()
        except AttributeError:
            context["get_arche_dump"] = None
        try:
            context["create_view_link"] = self.model.get_createview_url()
        except AttributeError:
            context["create_view_link"] = None
        try:
            context["download"] = self.model.get_dl_url()
        except AttributeError:
            context["download"] = None
        model_name = self.model.__name__.lower()
        context["entity"] = model_name
        return context

    def render_to_response(self, context, **kwargs):
        download = self.request.GET.get("sep", None)
        if download:
            sep = self.request.GET.get("sep", ",")
            timestamp = datetime.datetime.fromtimestamp(time.time()).strftime(
                "%Y-%m-%d-%H-%M-%S"
            )
            filename = "export_{}".format(timestamp)
            response = HttpResponse(content_type="text/csv")
            if context["conf_items"]:
                conf_items = context["conf_items"]
                try:
                    df = pd.DataFrame(
                        list(
                            self.get_queryset().values_list(*[x[0] for x in conf_items])
                        ),
                        columns=[x[1] for x in conf_items],
                    )
                except AssertionError:
                    response[
                        "Content-Disposition"
                    ] = 'attachment; filename="{}.csv"'.format(filename)
                    return response
            else:
                response[
                    "Content-Disposition"
                ] = 'attachment; filename="{}.csv"'.format(filename)
                return response
            if sep == "comma":
                df.to_csv(response, sep=",", index=False)
            elif sep == "semicolon":
                df.to_csv(response, sep=";", index=False)
            elif sep == "tab":
                df.to_csv(response, sep="\t", index=False)
            else:
                df.to_csv(response, sep=",", index=False)
            response["Content-Disposition"] = 'attachment; filename="{}.csv"'.format(
                filename
            )
            return response
        else:
            response = super(GenericListView, self).render_to_response(context)
            return response


class BaseCreateView(CreateView):
    model = None
    form_class = None
    template_name = "browsing/generic_create.html"

    def get_context_data(self, **kwargs):
        context = super(BaseCreateView, self).get_context_data()
        context["docstring"] = "{}".format(self.model.__doc__)
        context["class_name"] = "{}".format(self.model.__name__)
        return context


class BaseUpdateView(UpdateView):
    model = None
    form_class = None
    template_name = "browsing/generic_create.html"

    def get_context_data(self, **kwargs):
        context = super(BaseUpdateView, self).get_context_data()
        context["docstring"] = "{}".format(self.model.__doc__)
        context["class_name"] = "{}".format(self.model.__name__)
        # if self.model.__name__.endswith('s'):
        #     context['class_name'] = "{}".format(self.model.__name__)
        # else:
        #     context['class_name'] = "{}s".format(self.model.__name__)
        return context


class TeamMemberListView(GenericListView):

    model = TeamMember
    filter_class = TeamMemberListFilter
    formhelper_class = TeamMemberFilterFormHelper
    table_class = TeamMemberTable
    init_columns = [
        "id",
        "description",
    ]


class TeamMemberDetailView(DetailView):

    model = TeamMember
    template_name = "browsing/generic_detail.html"


class TeamMemberCreate(BaseCreateView):

    model = TeamMember
    form_class = TeamMemberForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TeamMemberCreate, self).dispatch(*args, **kwargs)


class TeamMemberUpdate(BaseUpdateView):

    model = TeamMember
    form_class = TeamMemberForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TeamMemberUpdate, self).dispatch(*args, **kwargs)


class TeamMemberDelete(DeleteView):
    model = TeamMember
    template_name = "webpage/confirm_delete.html"
    success_url = reverse_lazy("info:teammember_browse")

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(TeamMemberDelete, self).dispatch(*args, **kwargs)


class AboutTheProjectListView(GenericListView):

    model = AboutTheProject
    filter_class = AboutTheProjectListFilter
    formhelper_class = AboutTheProjectFilterFormHelper
    table_class = AboutTheProjectTable
    init_columns = [
        "id",
        "description",
    ]


class AboutTheProjectDetailView(DetailView):

    model = AboutTheProject
    template_name = "browsing/generic_detail.html"


class AboutTheProjectCreate(BaseCreateView):

    model = AboutTheProject
    form_class = AboutTheProjectForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AboutTheProjectCreate, self).dispatch(*args, **kwargs)


class AboutTheProjectUpdate(BaseUpdateView):

    model = AboutTheProject
    form_class = AboutTheProjectForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AboutTheProjectUpdate, self).dispatch(*args, **kwargs)


class AboutTheProjectDelete(DeleteView):
    model = AboutTheProject
    template_name = "webpage/confirm_delete.html"
    success_url = reverse_lazy("info:about_browse")

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AboutTheProjectDelete, self).dispatch(*args, **kwargs)


class ProjectInstListView(GenericListView):

    model = ProjectInst
    filter_class = ProjectInstListFilter
    formhelper_class = ProjectInstFilterFormHelper
    table_class = ProjectInstTable
    init_columns = [
        "id",
        "description",
    ]


class ProjectInstDetailView(DetailView):

    model = ProjectInst
    template_name = "browsing/generic_detail.html"


class ProjectInstCreate(BaseCreateView):

    model = ProjectInst
    form_class = ProjectInstForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProjectInstCreate, self).dispatch(*args, **kwargs)


class ProjectInstUpdate(BaseUpdateView):

    model = ProjectInst
    form_class = ProjectInstForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProjectInstUpdate, self).dispatch(*args, **kwargs)


class ProjectInstDelete(DeleteView):
    model = ProjectInst
    template_name = "webpage/confirm_delete.html"
    success_url = reverse_lazy("info:projectinst_browse")

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(ProjectInstDelete, self).dispatch(*args, **kwargs)
